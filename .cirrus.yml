env: # Environt variable to pass to all tasks
    CIRRUS_CLONE_DEPTH: 1 # No need to clone with whole history
    CIRRUS_WORKING_DIR: "/tmp/ci" # Where to clone repo

    # For rclone with google drive or any cloud! After first commit pushing, login to https://cirrus-ci.com , click top left corner 3 dot menu, click repository(yourname/aosp-builder) > Repository Settings > Secured Variables > enter content of ~/.config/rclone/rclone.conf (from pc where you setup rclone) > ENCRYPT, copy that ENCRYPTED hash
    # ENCRYPTED variables is unique for every repository, so you cant use my one, create you rclone config https://rclone.org/drive/#making-your-own-client-id
    rclone_config: "ENCRYPTED[022a4f6de65c92fc97d95fb4d3393f7d97d1889990e123e8401c53a4b2eb910eadcabaa5838aefca7fc968cc9c2eb0da]"
    CHATID: "ENCRYPTED[5255e15e91f5c740c23a296f0586d30051d47855f82e4d77945e31190ee699dd21f8c23682867b80edf3a5f61c53669e]"
    API_BOT: "ENCRYPTED[101a2edf87b005748c4d43711ca7f1839a9174f3be2d60c0c69523dec534fa6d888521b06d2a4d41e6f6cc1d4518e763]"

task:
    name: aosp # Project name
    timeout_in: 120m # Otherwise it will timeout at 60m automatically, 120m highest in free account
    container:
      image: gengkapak/bb:latest # It has built in setup environment + repo, aria2, rclone, pigz, username ci, and email ci@ci.ci [You can use your own docker image if you want, or you can use this one too!]
      cpu: 6 #8 cpu for dummy build, 10 or more cpu for final build, sometimes more than 8 cpu will cause a timelock, so you wont be able to run ci again within few hours, in build script use -j8 or -j10 depending what you used here, otherwise low memory issue will happen, 16cpu highest
      memory: 16G # So that we can have ram when needed, 24G highest
    download_ccache_background_script: # To download ccache in background
      - ./download_ccache # Ccache download script
    sync_script: # To sync source
      - ./sync # Source sync script
    monitor_background_script: # To monitor ccache and machine status every minute, runs in background
      - ./monitor # Monitor script
    build_script: # Actual build script foreground
      - ./build # Build script to run
    upload_ccache_script: # Upload ccache to cloud foreground
      - ./upload_ccache # Ccache uploading script
